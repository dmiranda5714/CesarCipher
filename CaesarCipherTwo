
/**
 * Write a description of CaesarCipherTwo here.
 * 
 * @author (your name) 
 * @version (a version number or a date)
 */
public class CaesarCipherTwo {
    private String upperAlphabet; 
    private String lowerAlphabet;
    private String lowerShiftedAlphabet1;
    private String upperShiftedAlphabet1;
    private String lowerShiftedAlphabet2;
    private String upperShiftedAlphabet2;
    public int dkey1;
    public int dkey2;
    
    public CaesarCipherTwo (int key1, int key2) {
    upperAlphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    lowerAlphabet = "abcdefghijklmnopqrstuvwxyz";
    
    upperShiftedAlphabet1 = upperAlphabet.substring(key1) + upperAlphabet.substring(0,key1);
    upperShiftedAlphabet2 = upperAlphabet.substring(key2) + upperAlphabet.substring(0,key2);
    lowerShiftedAlphabet1 = lowerAlphabet.substring(key1) + lowerAlphabet.substring(0,key1);
    lowerShiftedAlphabet2 = lowerAlphabet.substring(key2) + lowerAlphabet.substring(0,key2);
    
    dkey1 = key1;
    dkey2 = key2;
}

    public String encrypt(String input){
        StringBuilder encryptTwoKeys = new StringBuilder(input);   
        for(int i = 0; i < encryptTwoKeys.length(); i++) {
        
            char currChar = encryptTwoKeys.charAt(i);
            
            if(i%2 == 0 && Character.isUpperCase(currChar)) {
                int idx = upperAlphabet.indexOf(currChar);
                if (idx != -1) {
                    //System.out.println("current char is " + currChar + " switching using uppercase key1");
                    char newChar = upperShiftedAlphabet1.charAt(idx);
                    encryptTwoKeys.setCharAt(i, newChar);
                }
        
            }
            if(i%2 == 0 && Character.isLowerCase(currChar)) {
                int idx = lowerAlphabet.indexOf(currChar);
                if (idx != -1) {
                    //System.out.println("current char is " + currChar + " switching using lowercase key1");
                    char newChar = lowerShiftedAlphabet1.charAt(idx);
                    encryptTwoKeys.setCharAt(i, newChar);
                }
        
            }
            if(i%2 == 1 && Character.isUpperCase(currChar)) {
                int idx = upperAlphabet.indexOf(currChar);
                if (idx != -1) {
                    //System.out.println("current char is " + currChar + " switching using uppercase key2");
                    char newChar = upperShiftedAlphabet2.charAt(idx);
                    encryptTwoKeys.setCharAt(i, newChar);
                }
        
            }
            if(i%2 == 1 && Character.isLowerCase(currChar)) {
                int idx = lowerAlphabet.indexOf(currChar);
                if (idx != -1) {
                    //System.out.println("current char is " + currChar + " switching using lowercase key2");
                    char newChar = lowerShiftedAlphabet2.charAt(idx);
                    encryptTwoKeys.setCharAt(i, newChar);
                }
        
            }
            
        }
        
    return encryptTwoKeys.toString();
    }
    
    // public String decrypt(String input){
        // String answer = encrypt(input);
    
        // return answer; 
    // }
}
