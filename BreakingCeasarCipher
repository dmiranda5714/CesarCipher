/**
 * Write a description of BreakingCeasarCipher here.
 * 
 * @author (your name) 
 * @version (a version number or a date)
 */
import edu.duke.*;
import java.util.Random;

public class BreakingCeasarCipher {
    
    public void simulate(int rolls) {
        Random rand = new Random(); 
        int [] counts = new int[13];
        
        for(int k = 0; k < rolls; k++) {
            int d1 = rand.nextInt(6) +1;
            int d2 = rand.nextInt(6) +1;
            counts[d1+d2] += 1;
        }    
        for(int k = 2; k <= 12; k++){
        
            System.out.println(k + "'s=\t" + counts[k] + "\t" + 100.0 * counts[k]/rolls);
        }
    
    }
    
    public String[] getCommon() {
        FileResource resource = new FileResource("data/common.txt");
        String[] common = new String[20];
        int index = 0;
        for(String s : resource.words()) {
            common[index] = s;
            index += 1;
           
        }
    return common;
    }
    
    public int indexOf(String[] list, String word) {
        for (int k = 0; k< list.length; k++) {
            if (list[k].equals(word)) {
                  return k;
            }
        }
        return -1;
    }
    
    public void countWords(FileResource resource, String[] common, int[] counts) {
        for(String word : resource.words()){
            word = word.toLowerCase();
            int index = indexOf(common,word);
            if (index != -1) {
                counts[index] +=1;
            }
        }
        
    }
    
    public void countShakespeare() {
        String [] plays = {"caesar.txt", "errors.txt", "hamlet.txt", 
                       "likeit.text", "macbeth.txt", "romeo.txt"};
                       
        String[] common = getCommon();
        int[] counts = new int[common.length];
        for(int k = 0; k < plays.length; k++) {
            FileResource resource = new FileResource("data/" + plays[k]);
            countWords(resource,common,counts);
            System.out.println("done with " + plays[k]);
        }
        
        for(int k=0; k < common.length; k++) {
            System.out.println(common[k] + "\t" + counts[k]);
        
        }
        
        }
        
    public int[] countLetters(String message) {
            String alph = "abcdefghijklmnopqrstuvwxyz";
            int[] counts = new int[26];
            for(int k = 0; k < message.length(); k++) {
                char ch = Character.toLowerCase(message.charAt(k));
                int index = alph.indexOf(ch);
                if (index!= -1) {
                    counts[index] += 1;
                }
            }
            return counts;
        }
        
    public int indexOfMax(int values[]) {
        int index = 0;
        for(int i = 0; i < values.length; i++) {
            if(values[i] > values[index]) {
                index = i;
            }
        }
    return index ;
}    
    public void eyebalDecrypt(String encrypted) {
            CeasarCipher cipher = new CeasarCipher();
            for(int k = 0; k < 26; k++) {
                String s = cipher.encrypt(encrypted, k);
                System.out.println(k+"\t"+s);
            }
        
        }
    
     public String decrypt (String encrypted) {
    
         CeasarCipher cc = new CeasarCipher();
         int[] freqs = countLetters(encrypted);
         int maxDex = indexOfMax(freqs);
         int dkey = maxDex - 4;
         if (maxDex < 4) {
           dkey = 26 - (4 - maxDex);
         }
         return cc.encrypt(encrypted,26 - dkey);
     }
}

